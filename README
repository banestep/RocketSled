RocketSled is a micro framework for PHP 5.3 that makes it simple to organise and
execute classes from the command line or web browser.

The philosophy is that the "framework" part of your framework should do as little
as possible - ie. just provide literally a framework within which code can be 
developed. Within this framework I plan to release many other packages, equally
small and equally focused in scope.

The other key goal of RocketSled is that you should be able to install and run 
absolutely any code you find anywhere (there is so much PHP out there that works, 
and may not be pretty, but you still just want to use it because it will save you
time), and that packages written for RocketSled should try and be universally 
useful, ie. that RocketSled doesn't provide any specific libraries or base classes
that would preclude you from taking a package that was originally written to run
within RocketSled and running it in, say, a Zend application.

-----------------------------------------------------------------------------------
ARCHITECTURE
-----------------------------------------------------------------------------------

RocketSled consists of a single file (index.php) and a packages directory where you
put your classes.

The default location for the packages directory is just a directory called packages
in the web root.

You can modify this by creating a file called packages.config.php which defines 
the constant PACKAGES_DIR using php.net/define and putting it in your webroot.

NB: it's important that you use php.net/define here so that PACKAGES_DIR is a 
globally namespaced constant, eg:

<?php define('PACKAGES_DIR','/usr/local/share/packages/');

-----------------------------------------------------------------------------------
HELLO WORLD
-----------------------------------------------------------------------------------

1. Create a file in your packages directory called:

hello_world.class.php

2. Add the following code to it:

<?php
   use rocketsled\Runnable;

   class HelloWorld implements Runnable
   {
       public function run()
       {
           echo 'Hello World'.PHP_EOL;
       }
   }

3. Create the file:

packages/runnable.default.php

4. Add the following code to it:

<?php return 'HelloWorld';

5. Run it from the command line with:

php index.php

6. Run it from the web browser by simply pointing a browser to your web root

-----------------------------------------------------------------------------------
THE BASICS (which is everything really)
-----------------------------------------------------------------------------------

Any class which implements the rocketsled\Runnable interface can be executed
from the command line:

php index.php RunnableClass

or from the browser:

index.php?r=RunnableClass

The default autoloader implementation will load any class in any subdirectory
of your packages directory. The class names are mapped where:

ClassName

is expected to be located in a file called:

class_name.class.php

The default autoloader implementation also supports namespaces. It expects the
namespace path to match the directory structure so the class:

my\namespace\ClassName

is expected to be located in:

PACKAGES_DIR/my/namespace/class_name.class.php

If you have some package specific configuration or a custom autoloader 
implementation you can include it in a file in your package called:

config.php

You should always namespace your config files so as not to risk clashes in
constant or global variable names.

You should avoid using php.net/define in package specific config files. As
constants defined using php.net/define are not namespaced. Instead, use
the const keyword to define constants so that they will be namespaced, eg:

<?php
    namespace my_package;
    const SOME_CONFIG = 'something';

You can later access this constant with my_package\SOME_CONFIG.

For example if you wanted to use a package where all classes were defined in
a single file (ie. not supported by the default autoloader), you could include
the following config.php in your package directory:

<?php
    namespace my_package;
    
    const SOME_CONSTANT = 'value';

    spl_autoload_register(function($class)
    {
        $my_classes = array('FirstClass','SecondClass','ThirdClass');
        
        if(in_array($class,$my_classes))
            require_once(PACKAGES_DIR.'/my_package/classes.php');
    });

-----------------------------------------------------------------------------------
A WORD ON NAMESPACES
-----------------------------------------------------------------------------------

The default autoload implementation supports namespaces. In general I'm of the 
opinion that the way most frameworks have chosen to use namespaces is 
cumbersome (ie. that each an every class should be namespaced).

I think that you should avoid namespaces and use them only where required, ie. because
you have two packages that you want to use, both of which have a class called "User",
or where you want to use a package which might come from another framework which
uses namespaces.

This will probably result in some "vendor code" having to be modified at some point, 
but the alternative (which is always using namespaces to import every single class you
use) to me just destroys the benefits (aside from performance benefits obviously of
not having to load every class each time your script executes) of auto load in the first
place, namely that you don't have to maintain an explicit list of "require" statements
at the top of each class file. There is a good discussion on this here:

http://propel.posterous.com/the-end-of-autoloading

Constants that you define in your config.php files, though, should always be namespaced
because there are fewer of them and its not such a cumbersome task to always prefix
constants with a namespace when using them. To namespace constants you should define
them using the const keyword, rather than php.net/define.

-----------------------------------------------------------------------------------
